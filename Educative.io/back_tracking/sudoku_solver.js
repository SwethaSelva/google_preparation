let DIGITS = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];

function solveSudoku(board) {
  let rowHash = {};
  let colHash = {};
  let boxHash = {};

  for (let i = 0; i < board.length; i++) {
    for (let j = 0; j < board[i].length; j++) {
      if (board[i][j] === '.') continue;
      let digit = board[i][j];

      if (!rowHash[i]) rowHash[i] = {};
      rowHash[i][digit] = true;

      if (!colHash[j]) colHash[j] = {}
      colHash[j][digit] = true;

      let boxIdx = calcBoxId(i, j);
      if (!boxHash[boxIdx]) boxHash[boxIdx] = {};
      boxHash[boxIdx][digit] = true;
    }
  }

  return function backTracking(row = 0, col = 0) {
    if (row >= DIGITS.length) return board;

    let [nextRow, nextCol] = [row, col + 1];
    if (nextCol >= DIGITS.length) {
      nextRow++;
      nextCol = 0
    }

    if (board[row][col] !== '.') return backTracking(nextRow, nextCol);

    for (let digit of DIGITS) {
      if (isNotValid(digit, row, col)) continue;

      board[row][col] = digit;
      modifyHash(row, col, digit, true);
      if (backTracking(nextRow, nextCol)) return board;
      modifyHash(row, col, digit, false);
      board[row][col] = '.';
    }
    return false;
  }() || board;

  function isNotValid(digit, row, col) {
    let boxIdx = calcBoxId(row, col);
    return rowHash[row][digit] || colHash[col][digit] || boxHash[boxIdx][digit];
  }

  function calcBoxId(row, col) {
    return 3 * Math.floor(row / 3) + Math.floor(col / 3);
  }

  function modifyHash(row, col, digit, val = false) {
    let boxId = calcBoxId(row, col);

    rowHash[row][digit] = !!val;
    colHash[col][digit] = !!val;
    boxHash[boxId][digit] = !!val;
  }
}


// console.log(solveSudoku([[".",".",".",".",".",".",".","7","."],["2","7","5",".",".",".","3","1","4"],[".",".",".",".","2","7",".","5","."],["9","8",".",".",".",".",".","3","1"],[".","3","1","8",".","4",".",".","."],[".",".",".","1",".",".","8",".","5"],["7",".","6","2",".",".","1","8","."],[".","9",".","7",".",".",".",".","."],["4","1",".",".",".","5",".",".","7"]]));
console.log(solveSudoku([[".", ".", "9", "7", "4", "8", ".", ".", "."], ["7", ".", ".", ".", ".", ".", ".", ".", "."], [".", "2", ".", "1", ".", "9", ".", ".", "."], [".", ".", "7", ".", ".", ".", "2", "4", "."], [".", "6", "4", ".", "1", ".", "5", "9", "."], [".", "9", "8", ".", ".", ".", "3", ".", "."], [".", ".", ".", "8", ".", "3", ".", "2", "."], [".", ".", ".", ".", ".", ".", ".", ".", "6"], [".", ".", ".", "2", "7", "5", "9", ".", "."]]));
// console.log(solveSudoku([[".",".","6",".",".","4",".",".","."],[".","3",".",".","1",".",".","9","5"],[".",".",".",".",".",".","8",".","."],[".",".",".",".","8",".","3",".","."],["4",".",".",".",".","1",".","8","2"],[".","2",".",".",".",".","7",".","."],[".",".",".",".",".",".",".",".","7"],[".","5",".",".","9",".",".","2","1"],["3",".",".","5",".",".",".",".","."]]));
// console.log(solveSudoku([["6",".",".",".",".",".","1",".","."],[".",".",".","3",".",".",".",".","."],[".","9",".",".","4","7",".","8","."],["9",".",".",".","5","3",".",".","6"],[".",".",".","2",".",".",".","5","."],[".","3",".","8",".",".",".",".","."],[".","7",".",".","9","5",".","4","."],[".",".","4",".",".",".",".",".","8"],[".",".",".",".","2",".",".",".","."]]));
// console.log(solveSudoku([[".",".",".",".",".",".","7",".","."],[".","4",".",".","3",".",".","6","5"],[".",".","1",".",".","8",".",".","."],[".","6",".",".","5",".",".","3","9"],["4",".",".","6",".",".",".",".","."],[".",".",".",".",".",".",".","2","."],["8",".",".",".",".","3",".","9","7"],[".",".",".",".","7",".","4",".","."],[".","9",".",".",".",".","2",".","."]]));
// console.log(solveSudoku([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]));